// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: protocol.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Grpctest {
  public static partial class Pricefeed
  {
    static readonly string __ServiceName = "grpctest.Pricefeed";

    static readonly grpc::Marshaller<global::Grpctest.PriceUpdateSubscription> __Marshaller_grpctest_PriceUpdateSubscription = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grpctest.PriceUpdateSubscription.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grpctest.PriceUpdate> __Marshaller_grpctest_PriceUpdate = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grpctest.PriceUpdate.Parser.ParseFrom);

    static readonly grpc::Method<global::Grpctest.PriceUpdateSubscription, global::Grpctest.PriceUpdate> __Method_Subscribe = new grpc::Method<global::Grpctest.PriceUpdateSubscription, global::Grpctest.PriceUpdate>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "Subscribe",
        __Marshaller_grpctest_PriceUpdateSubscription,
        __Marshaller_grpctest_PriceUpdate);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Grpctest.ProtocolReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Pricefeed</summary>
    public abstract partial class PricefeedBase
    {
      public virtual global::System.Threading.Tasks.Task Subscribe(global::Grpctest.PriceUpdateSubscription request, grpc::IServerStreamWriter<global::Grpctest.PriceUpdate> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Pricefeed</summary>
    public partial class PricefeedClient : grpc::ClientBase<PricefeedClient>
    {
      /// <summary>Creates a new client for Pricefeed</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public PricefeedClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Pricefeed that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public PricefeedClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected PricefeedClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected PricefeedClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual grpc::AsyncServerStreamingCall<global::Grpctest.PriceUpdate> Subscribe(global::Grpctest.PriceUpdateSubscription request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Subscribe(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::Grpctest.PriceUpdate> Subscribe(global::Grpctest.PriceUpdateSubscription request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_Subscribe, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override PricefeedClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new PricefeedClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(PricefeedBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Subscribe, serviceImpl.Subscribe).Build();
    }

  }
}
#endregion
